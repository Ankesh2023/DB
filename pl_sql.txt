


Problem statement 6.

Q 1.Consider table Stud(Roll, Att,Status)
Write a PL/SQL block for following requirement and handle the exceptions.
Roll no. of student will be entered by user. Attendance of roll no. entered by user will be 
checked in Stud table. If attendance is less than 75% then display the message “Term not granted” 
and set the status in stud table as “D”. Otherwise display message “Term granted” and set the status in stud
table as “ND”.

CREATE TABLE stud(roll_no NUMBER PRIMARY KEY , att NUMBER ,status char(5));

Declare
mroll number(10);
matt number(10);
Begin
mroll:=&mroll;
select att into matt from stud where roll_no = mroll;
if matt<75 then
dbms_output.put_line(mroll || 'is detained');
update stud set status='D' where roll_no = mroll;
else
dbms_output.put_line(mroll || 'is not detained');
update stud set status='ND' where roll_no = mroll;
end if;
Exception
when no_data_found then
dbms_output.put_line(mroll || 'Not found');
End;
/

Q 2.The bank manager has decided to activate all those accounts which were previously 
marked as inactive for performing no transaction in last 365 days. Write a PL/SQ block (using implicit cursor)
to update the status of account, display an approximate message based on the no. of rows affected by the update. (Use of %FOUND, %NOTFOUND, %ROWCOUNT)
SELECT * FROM account;
ACC_NO NAME STATUS
---------- ---------- ----------
129 Harshad active
123 Avi inactive
122 Aadi inactive
137 Nayan active
4 rows selected.
BEGIN
UPDATE account SET status = 'active' WHERE status = 'inactive';
dbms_output.put_line(SQL%ROWCOUNT||' no of account updated');
END;
/
2 no of account updated
PL/SQL procedure successfully completed.
SELECT * FROM account;
ACC_NO NAME STATUSse
---------- ---------- ----------
129 Harshad active
123 Avi active
122 Aadi active
137 Nayan active
4 rows selected.
BEGIN
UPDATE account SET status = 'active' WHERE status = 'inactive';
dbms_output.put_line(SQL%ROWCOUNT||' no of account updated');
END;
/
0 no of account updated


Problem statement 7.

Q 1. Write an SQL code block these raise a user defined exception where business rule is 
voilated.BR for client_master table specifies when the value of bal_due field is less than 0 handle 
the exception.

create table client_master(client_id number(20),input number(10));

Declare
input number(10);
client_id number;
bal_due Exception;
Begin
client_id :=& client_id;
input :=&input;
IF input < 0 THEN
raise bal_due;
ELSE
INSERT INTO client_master VALUES(client_id,input);
dbms_output.put_line('Inserted successfully');
END IF;
Exception
when bal_due then
dbms_output.put_line(input || 'Your balance is less then 0');
End;

Q 2. Organization has decided to increase the salary of employees by 10% of existing 
salary, who are having salary less than average salary of organization, Whenever such salary updates 
takes place, a record for the same is maintained in the increment_salary table.
EMP (E_no , Salary)
increment_salary(E_no , Salary)

create table emp(emp_no number(10),Salary number(20));
 create table salary(emp_no number(10),salary number(20));
create table increment_salary(E_no number(10),Salary number(10));

insert into salary values(1,7887);
insert into salary values(2,78);




DECLARE
CURSOR salhigh IS SELECT emp_no,salary FROM salary WHERE salary < (SELECT
AVG(salary) FROM salary);
memp_no salary.emp_no%type;
msalary salary.salary%type;
BEGIN
OPEN salhigh;
IF salhigh%isopen THEN
LOOP
fetch salhigh into memp_no,msalary;
exit when salhigh%notfound;
if salhigh%found then
update salary set salary = (0.1*msalary+ msalary) WHERE emp_no = memp_no;
insert into increment_salary values(memp_no,0.1*msalary+ msalary);
end if;
end loop;
end if;
Close salhigh;
END;
/



Problem statement 8.

Q 1.Borrower(Roll_no, Name, DateofIssue, NameofBook, Status)
Fine(Roll_no,Date,Amt)
1. Accept roll_no& name of book from user.
2. Check the number of days (from date of issue), if days are between 15 to 30 then fine 
amount will be Rs 5per day.
3. If no. of days>30, per day fine will be Rs 50 per day & for days less than 30, Rs. 5 per day.
After submitting the book, status will change from I to R
4. If condition of fine is true, then details will be stored into fine table.
5. Also handles the exception by named exception handler or user define exception 
handler.


CREATE PROCEDURE process_borrower_fine (
mroll_no IN NUMBER
)
IS
days INTEGER;
doi DATE;
dor DATE := SYSDATE;
mamt NUMBER;

BEGIN
SELECT dateofissue INTO doi FROM borrower WHERE roll_no = mroll_no;
days := dor - doi;
dbms_output.put_line(days);
UPDATE borrower SET status = 'r' WHERE roll_no = mroll_no;
IF (days > 30) THEN
mamt := (days - 30) * 50 + 75;
INSERT INTO fine VALUES (mroll_no, dor, mamt);
ELSIF (days > 15) THEN
mamt := (days - 15) * 5;
INSERT INTO fine VALUES (mroll_no, dor, mamt);
END IF;
END;


select * from fine;



Problem statement 9.

Q 1. Write PL/SQL block using explicit cursor for following requirements:
College has decided to mark all those students detained (D) who are having attendance less than 75%.
Whenever such update takes place, a record for the same is maintained in the D_Stud table.

create table stud21(roll number(4), att number(4), status varchar(1));
create table d_stud(roll number(4), att number(4));

SELECT * FROM stud;

DECLARE
CURSOR check_status IS SELECT roll_no,att FROM stud WHERE att < 75 ;
mroll_no stud.roll_no%type;
matt stud.att%type;
BEGIN
OPEN check_status;
IF check_status%isopen THEN
LOOP
FETCH check_status INTO mroll_no,matt;
exit WHEN check_status%notfound;
IF check_status%found THEN
UPDATE stud SET status = 'D' WHERE roll_no = mroll_no;
INSERT INTO d_stud VALUES(mroll_no,matt);
END IF;
END LOOP;
END IF;
CLOSE check_status;
END;
/

SELECT * FROM stud;

SELECT * FROM d_stud;



Problem statement 10.

Q 1.Consider table Stud(Roll, Att,Status)

Write a PL/SQL block for following requirement and handle the exceptions.
Roll no. of student will be entered by user. Attendance of roll no. entered by user will be 
checked in Stud table. If attendance is less than 75% then display the message “Term not granted” 
and set the status in stud table as “D”. Otherwise display message “Term granted” and set the status in stud table as “ND”.

DECLARE
 v_roll_number Stud.Roll%TYPE;
 v_attendance Stud.Att%TYPE;
 v_status Stud.Status%TYPE;
BEGIN
 v_roll_number := &roll_number;
 SELECT Att, Status INTO v_attendance, v_status
 FROM Stud WHERE Roll = v_roll_number;
 IF v_attendance < 75 THEN
 DBMS_OUTPUT.PUT_LINE('Term not granted');
 UPDATE Stud SET Status = 'D' WHERE Roll = v_roll_number;
 ELSE
 DBMS_OUTPUT.PUT_LINE('Term granted');
 UPDATE Stud SET Status = 'ND' WHERE Roll = v_roll_number;
 END IF;
EXCEPTION
 WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('Roll number not found');
 WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/

Q 2.Write a update, delete trigger on clientmstr table. The System should keep track of the 
records that ARE BEING updated or deleted. The old value of updated or deleted records should be 
added in audit_trade table. (separate implementation using both row and statement triggers)

CREATE OR REPLACE TRIGGER trade_record
AFTER INSERT OR DELETE
ON client
FOR EACH ROW
DECLARE
op VARCHAR(10);
BEGIN
IF updating THEN
op:='update';
END IF;
IF deleting THEN
op:='Delete';
END IF;
INSERT INTO trade VALUES(:old.c_id,:old.p_amt,op);
END;
/

SELECT * FROM client;

SELECT * FROM trade;


CREATE OR REPLACE TRIGGER trade_record
AFTER UPDATE OR DELETE
ON client
FOR EACH ROW
DECLARE
op VARCHAR(10);
BEGIN
IF updating THEN
op:='update';
END IF;
IF deleting THEN
op:='Delete';
END IF;
INSERT INTO trade VALUES(:old.c_id,:old.p_amt,op);
END;
/

SELECT * FROM client;

SELECT * FROM trade;

UPDATE client SET p_amt = 1000 WHERE p_amt=1500;

SELECT * FROM trade;

CREATE OR REPLACE TRIGGER trade_record
AFTER UPDATE OR DELETE
ON client
DECLARE
op VARCHAR(10);
BEGIN
IF updating THEN
op:='update';
END IF;
IF deleting THEN
op:='Delete';
END IF;
INSERT INTO trade VALUES(:old.c_id,:old.p_amt,op);
END;

CREATE TABLE trade_status(status VARCHAR(10));

CREATE OR REPLACE TRIGGER trade_record
AFTER UPDATE OR DELETE
ON client
DECLARE
op VARCHAR(10);
BEGIN
IF updating THEN
op:='update';
END IF;
IF deleting THEN
op:='Delete';
END IF;
INSERT INTO trade_status VALUES(op);
END;
/

SELECT * FROM client;

UPDATE client SET p_amt = 1500 WHERE p_amt=1000;

SELECT * FROM trade_status;





Problem statement 11.

Q 1. Write a stored function in PL/SQL for given requirement and use the same in PL/SQL 
block.Account no. and branch name will be accepted from user. The same will be searched in 
table acct_details. If status of account is active then display appropriate message and also store 
the account details in active_acc_details table, otherwise display message on screen “account 
is inactive”.

 create table acc_details(acc_no NUMBER primary key , b_name char(10) , status 
char(2));

CREATE OR REPLACE FUNCTION account_fun (
macc_no IN NUMBER,b_name IN CHAR)
 RETURN CHAR 
IS mst CHAR(2); 
BEGIN
SELECT status INTO mst FROM acc_details
WHERE acc_no = macc_no AND b_name = b_name; 
RETURN mst;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN NULL; 
WHEN OTHERS THEN
RETURN NULL;
END;


DECLARE
macc_no NUMBER(10);
mst CHAR(2);
b_name CHAR(10);
BEGIN
macc_no := &macc_no;
b_name := '&b_name';
mst := account_fun(macc_no, b_name); 
IF mst = 'A' THEN
DBMS_OUTPUT.PUT_LINE('Account is active');
parenthesis
INSERT INTO active_acc_details VALUES(macc_no,b_name,mst);
ELSE
DBMS_OUTPUT.PUT_LINE('Account is Inactive');
END IF;
END;

SQL> select * from active_acc_details;





Problem statement 12.

Q 1. Write an SQL code block these raise a user defined exception where business rule is 
voilated.BR for client_master table specifies when the value of bal_due field is less than 0 handle 
the exception.

Declare
input number(10);
client_id number;
bal_due Exception;
Begin
client_id :=& client_id;
input :=&input;
IF input < 0 THEN
raise bal_due;
ELSE
INSERT INTO client_master VALUES(client_id,input);
dbms_output.put_line('Inserted successfully');
END IF;
Exception
when bal_due then
dbms_output.put_line(input || 'Your balance is less then 0');
End;

Q 2.Write a before trigger for Insert, update event considering following requirement:
Emp(e_no, e_name, salary)

I) Trigger action should be initiated when salary is tried to be inserted is less than Rs. 
50,000/-
II) Trigger action should be initiated when salary is tried to be updated for value less than 
Rs 50,000/-
Action should be rejection of update or Insert operation by displaying appropriate error 
message.Also the new values expected to be inserted will be stored in new table.
Tracking(e_no, salary).

CREATE OR REPLACE TRIGGER emp_sal_record
BEFORE UPDATE OR INSERT
ON employee
FOR EACH ROW
DECLARE
sal NUMBER:=:new.salary;
BEGIN
IF sal < 50000 THEN
IF updating THEN
 raise_application_error(-20003,'This update opration violet comapany rule / record
not inserted');
 END IF;
 IF inserting THEN
 raise_application_error(-20003,'This insert opration violet comapany rule / record
not inserted');
 END IF;
 ELSE
 DBMS_OUTPUT.PUT_LINE('Record created successfully');
 INSERT INTO emp_sal VALUES(:new.e_no,:new.salary);
 END IF;
 END;
 /


INSERT INTO employee VALUES(129,'Aviraj',100000);
Record created successfully
1 row created.
INSERT INTO employee VALUES(124,'Ankit',1000);
INSERT INTO employee VALUES(124,'Ankit',1000)
UPDATE employee SET salary = 1000 WHERE e_no =129;



Problem statement 13.

Q 1. . Write a PL/SQL stored Procedure for following requirements and call the procedure 
in appropriate PL/SQL block.
Borrower(Rollin, Name, DateofIssue, NameofBook, Status)
Fine(Roll_no,Date,Amt)
Accept roll_no& name of book from user.
1. Check the number of days (from date of issue), if days are between 15 to 30 then fine 
amount will be Rs 5per day.
2. If no. of days>30, per day fine will be Rs 50 per day & for days less than 30, Rs. 5 per day.
3. After submitting the book, status will change from I to R.
4. If condition of fine is true, then details will be stored into fine table.
CREATE PROCEDURE process_borrower_fine (
mroll_no IN NUMBER)
IS
days INTEGER;
doi DATE;
dor DATE := SYSDATE;
mamt NUMBER;
BEGIN
SELECT dateofissue INTO doi FROM borrower WHERE roll_no = mroll_no;
days := dor - doi;
dbms_output.put_line(days);
UPDATE borrower SET status = 'r' WHERE roll_no = mroll_no;
IF (days > 30) THEN
mamt := (days - 30) * 50 + 75;
INSERT INTO fine VALUES (mroll_no, dor, mamt);
ELSIF (days > 15) THEN
mamt := (days - 15) * 5;
INSERT INTO fine VALUES (mroll_no, dor, mamt);
END IF;
END;

 BEGIN
 process_borrower_fine(&mroll_no);
 END;
 /
 select * from fine;




Problem statement 14.

Q 1. Write a Stored Procedure namely proc_Grade for the categorization of student. If 
marks scored by students in examination is <=1500 and marks>=990 then student will be placed 
in distinction category if marks scored are between 989 and900 category is first class, if 
marks 899 and 825 category is Higher Second Class.

Write a PL/SQL block for using procedure created with above requirement.
Stud_Marks(name, total_marks)
Result(Roll,Name, Class)


CREATE OR REPLACE PROCEDURE proc_Grade(
p_name IN VARCHAR2,
p_marks IN NUMBER,
p_roll IN NUMBER)
IS
v_class VARCHAR2(100);
BEGIN
IF p_marks <= 1500 AND p_marks >= 990 THEN
v_class := 'Dist';
ELSIF p_marks < 990 AND p_marks >= 900 THEN
v_class := 'First';
ELSIF p_marks < 900 AND p_marks >= 825 THEN
v_class := 'Higher';
ELSE
v_class := 'Other';
END IF;
INSERT INTO Result VALUES (p_roll, p_name, v_class);
END;


DECLARE
v_name VARCHAR2(100);
v_total_marks NUMBER;
v_roll NUMBER;
BEGIN
v_roll := &v_roll;
v_name := '&v_name';
select marks INTO v_total_marks FROM stud_marks where roll_no = v_roll;
proc_Grade(v_name, v_total_marks, v_roll);
END;

select * from Result;




Problem statement 15.

Create Database PCCOE
Create following Collections
Teachers(Tname,dno,dname,experience,salary,date_of_joining )
Students(Sname,roll_no,class)
Q1. Find the information about all teachers
Q2. Find the information about all teachers of computer department
Q3. Find the information about all teachers of computer,IT,ande&TC department
Q4. Find the information about all teachers of computer,IT,and E&TC department having 
salary greater than or equl to 10000/-
Q5. Find the student information having roll_no = 2 or Sname=xyz
Q6. Update the experience of teacher-praveen to 10years, if the entry is not available in database
consider the entry as new entry.
Q7. Update the deparment of all the teachers working in IT deprtment to COMP
Q8. Find the teachers name and their experience from teachers collection
Q9. Using Save() method insert one entry in department collection
Q10. Using Save() method change the dept of teacher praveen to IT
Q11. Delete all the doccuments from teachers collection having IT dept.
Q12. Display with pretty() method, the first 3 doccuments in teachers collection in 
ascending order.





Problem statements 16

Consider the relational database
Supplier(Sid,Sname,address)
Parts(Pid, Pname, Color)
Catalog(sid,pid,cost)
Q. Find name of all parts whose color is green.
SELECT Pname FROM Parts WHERE Color = 'green';

Q. Find names of suppliers who supply some red parts.
SELECT DISTINCT Sname FROM Supplier WHERE Sid IN (
 SELECT Sid FROM Catalog WHERE pid IN (
 SELECT Pid FROM Parts WHERE Color = 'red'
 )
);

Q. Find names of all parts whose cost is more than Rs25.
SELECT Pname FROM Parts WHERE Pid IN (
 SELECT pid FROM Catalog WHERE cost > 25
);


Consider the relational database
Student(Rollno,name,address)
Subject(sub_code,sub_name)
Marks(Rollno,sub_code, marks)
Q. Find out average marks of each student along with the name of student.
SELECT s.name, AVG(m.marks) AS average_marks FROM Student s JOIN Marks m ON s.Rollno
= m.Rollno GROUP BY s.Rollno, s.name;

Q. Find how many students have failed in the subject “DBMS”
SELECT COUNT(*) AS num_failed_students FROM Marks WHERE sub_code =SELECT
sub_code FROM Subject WHERE sub_name = 'DBMS') AND marks < 40;




Problem statements 17

Write Pl/SQL code block that will accept account number from user , check if the users 
balance is less than the minimum balance , only deduct Rs.100/- from the balance .

CREATE TABLE Account (Acc_no NUMBER PRIMARY KEY, branch_name VARCHAR2(50),
balance NUMBER);

INSERT INTO Account (Acc_no, branch_name, balance)VALUES (1, 'Branch1', 1500);
INSERT INTO Account (Acc_no, branch_name, balance)VALUES (2, 'Branch2', 2000);
INSERT INTO Account (Acc_no, branch_name, balance)VALUES (3, 'Branch3', 100);

DECLARE
 v_acc_no NUMBER;
 v_balance NUMBER;
 v_min_balance NUMBER := 1000;
 v_acc_no := &acc_no;
 SELECT balance INTO v_balance
 FROM Account WHERE Acc_no = v_acc_no;
 IF v_balance < v_min_balance THEN
 UPDATE Account SET balance = balance - 100
 WHERE Acc_no = v_acc_no;
 DBMS_OUTPUT.PUT_LINE('Deducted Rs.100 from the balance.');
 ELSE
 DBMS_OUTPUT.PUT_LINE('Balance is above minimum balance.');
 END IF;
 COMMIT;
EXCEPTION
 WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('Account number not found.');
 WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
 ROLLBACK; 
END;
/



Problem statements 18

Write Pl/SQL code block for inverting number 1234 to 4321.

DECLARE
 v_number NUMBER := 1234; -- Number to invert
 v_inverted_number NUMBER := 0;
 v_remainder NUMBER;
BEGIN
 WHILE v_number > 0 LOOP
 v_remainder := MOD(v_number, 10);
 v_inverted_number := v_inverted_number * 10 + v_remainder;
 v_number := (v_number - v_remainder) / 10;
 END LOOP;
 DBMS_OUTPUT.PUT_LINE('Inverted Number: ' || v_inverted_number);
END;
/


Problem statements 21
Write PL/SQL code block such that depending upon user supplied account number, the 
customer to whom account belongs , the introducer of that account are inserted into
ACCOUNT_MASTER_INFO table .If the user enters an account number that is not in the
ACCOUNT_MASTER table, then the PL/SQL block must display appropriate error
message(Exception Handling)

DECLARE
 v_acc_no NUMBER := &account_number; 
 v_cust_name VARCHAR2(100);
 v_introducer VARCHAR2(100);
BEGIN
 SELECT cust_name, introducer
 INTO v_cust_name, v_introducer
 FROM ACCOUNT_MASTER
 WHERE acc_no = v_acc_no;
 INSERT INTO ACCOUNT_MASTER_INFO (acc_no, cust_name, introducer)
 VALUES (v_acc_no, v_cust_name, v_introducer);
 DBMS_OUTPUT.PUT_LINE('Record inserted successfully.');
EXCEPTION
 WHEN NO_DATA_FOUND THEN
 DBMS_OUTPUT.PUT_LINE('Account number not found in ACCOUNT_MASTER table.');
 WHEN OTHERS THEN
 DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/



Problem statements 22

A stored function is created to perform the ACCOUNT_NO check operation 
.F_checkAccNO() is the name of function which accept a variable ACCOUNT_NO and returns the value to host
environment The value changes from 0(if ACCOUNT_NO does not exist) to 1(if ACCOUNT_NO exist) depending on the records retrieved.

CREATE OR REPLACE FUNCTION F_checkAccNO (p_account_no IN NUMBER)
RETURN NUMBER
IS
 v_count NUMBER;
BEGIN
 SELECT COUNT(*)
 INTO v_count
 FROM ACCOUNT_MASTER
 WHERE acc_no = p_account_no;
 RETURN CASE WHEN v_count > 0 THEN 1 ELSE 0 END;
END;
/

DECLARE
 v_result NUMBER;
BEGIN
 v_result := F_checkAccNO(123456789); -- Replace 123456789 with the account number 
you want to check
 IF v_result = 1 THEN
 DBMS_OUTPUT.PUT_LINE('Account number exists.');
 ELSE
 DBMS_OUTPUT.PUT_LINE('Account number does not exist.');
 END IF;
END;
/




Problem statements 23


create a row level trigger for the CUSTOMERS table that would fire for INSERT or UPDATE 
or DELETE operations performed on the CUSTOMERS table. This trigger will display the salary 
difference between the old values and new values

CREATE OR REPLACE TRIGGER customers_salary_trigger
BEFORE INSERT OR UPDATE OR DELETE ON customers
FOR EACH ROW
DECLARE
 v_old_salary NUMBER;
 v_new_salary NUMBER := :NEW.salary;
BEGIN
 IF INSERTING OR UPDATING THEN
 v_old_salary := :OLD.salary;
 DBMS_OUTPUT.PUT_LINE('Salary difference: ' || (v_new_salary - v_old_salary));
 ELSIF DELETING THEN
 DBMS_OUTPUT.PUT_LINE('Salary deleted: ' || :OLD.salary);
 END IF;
END;
/



Problem statements 24


Write PL/SQL block to update the Customer table and increase the salary of each customer 
by 500 and use the SQL%ROWCOUNTattribute to determine the number of rows affected.

DECLARE
 v_num_rows NUMBER;
BEGIN
 UPDATE Customer
 SET salary = salary + 500;
 v_num_rows := SQL%ROWCOUNT;
 DBMS_OUTPUT.PUT_LINE('Number of rows updated: ' || v_num_rows);
END;
/
