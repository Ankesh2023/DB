Problem statement 1. Consider following Bank database schema and solve given queries: Account(Acc_no, branch_name,balance) branch(branch_name,branch_city, assets) customer(cust_name,cust_street,cust_city) Depositor(cust_name,acc_no) Loan(loan_no,branch_name,amount) Borrower(cust_name,loan_no)
Q.1 Create above tables with appropriate constraints like primary key, foreign key, not null etc. with suitable data
CREATE TABLE branch(
  	branch_name varchar(50) primary key,
    branch_city varchar(50),
    assests  number
);

CREATE TABLE account(
	acc_no number primary key,
branch_name varchar(50) references branch(branch_name) on delete set null,
balance number(10,2)    
);

CREATE TABLE customer (
  	cust_name varchar(50) primary key,
    cust_city varchar(50),
    cust_street varchar(50)
);

CREATE TABLE depositor(
  	cust_name varchar(50) references customer(cust_name) on delete CASCADE,
    acc_no number REFERENCES account(acc_no) on delete set null
);

CREATE TABLE loan (
  	loan_no number primary key,
    branch_name varchar(50) references branch(branch_name) on delete set null,
    amount number(10,2)
);
CREATE TABLE borrower(
    cust_name varchar(50) references customer(cust_name) on delete cascade,
    loan_no number references loan(loan_no) on delete set null
);

drop table account;
drop table branch;
drop table borrower;
drop table loan;
drop table customer;
drop table depositor;

select * from branch;
-- Insert data into the branch table
INSERT INTO branch (branch_name, branch_city, assests)
VALUES ('Branch1', 'City1', 100000);
INSERT INTO branch (branch_name, branch_city, assests)
VALUES ('Branch2', 'City2', 150000);
INSERT INTO branch (branch_name, branch_city, assests)
VALUES ('Branch3', 'City3', 200000);

select * from account;
INSERT INTO account (acc_no, branch_name, balance) VALUES (1, 'Branch1', 5000.00);
INSERT INTO account (acc_no, branch_name,balance) VALUES (2, 'Branch2', 7500.00);
INSERT INTO account (acc_no, branch_name,balance) VALUES (3, 'Branch3', 10000.00);

-- Insert data into the customer table
SELECT * FROM customer;
INSERT INTO customer (cust_name, cust_city, cust_street)
VALUES ('Customer1', 'City1', 'Street1');
INSERT INTO customer (cust_name, cust_city, cust_street)
VALUES ('Customer2', 'City2', 'Street2');
INSERT INTO customer (cust_name, cust_city, cust_street)
VALUES ('Customer3', 'City3', 'Street3');


-- Insert data into the depositor table
select * from depositor;
INSERT INTO depositor (cust_name, acc_no)
VALUES ('Customer1', 1);
INSERT INTO depositor (cust_name, acc_no)
VALUES ('Customer2', 2);
INSERT INTO depositor (cust_name, acc_no)
VALUES ('Customer3', 3);

-- Insert data into the loan table
SELECT * FROM loan;
INSERT INTO loan (loan_no, branch_name, amount) VALUES (1, 'Branch1', 5000.00);
INSERT INTO loan (loan_no, branch_name, amount) VALUES (2, 'Branch2', 7500.00);
INSERT INTO loan (loan_no, branch_name, amount) VALUES (3, 'Branch3', 10000.00);

select * from borrower;
INSERT INTO borrower (cust_name, loan_no) VALUES ('Customer1', 1);
INSERT INTO borrower (cust_name, loan_no) VALUES ('Customer2', 2);
INSERT INTO borrower (cust_name, loan_no) VALUES ('Customer3', 3);
Q.No2 Create synonym for customer table as cust.
	create synonym cust for customer;
3 Add customer phone number in Customer table.
	alter table customer add cust_phone number(10);
Q.4 Delete phone number attribute from Customer table.
	alter table customer drop column cust_phone;
Q 5.Find the names of all branches in loan relation.
	select distinct branch_name from loan;
Q.6. Find all customers who have a loan from bank. Find their names,loan_no and loan amount.
		select l.loan_no,l.amount,b.cust_name from loan l
		join borrower b on l.loan_no = b.loan_no;
Q.7. List all customers in alphabetical order who have loan from Akurdi branch.
	select cust_name from borrower where loan_no in (SELECT loan_no from loan where branch_name ='Branch4') order by cust_name;
Q.8. Find all customers who have an account or loan or both at bank.
select cust_name from customer where cust_name in (select cust_name from depositor 
		union 
select cust_name from borrower);
Q.9. Find average account balance at Akurdi branch.
select avg(balance) from account where branch_name='Branch1';
Q.10. Find no. of depositors at each branch. 
select a.branch_name,count(d.acc_no) from account a  join depositor d on a.acc_no = d.acc_no group by a.branch_name;
Q.11. Delete all tuples at every branch located in Nigdi.
      delete from branch where branch_city='Akurdi';


Problem statement 3.  Consider following Bank database schema and solve given queries:
 Account(Acc_no, branch_name,balance)
 branch(branch_name,branch_city, assets)
 customer(cust_name,cust_street,cust_city)
 Depositor(cust_name,acc_no)
 Loan(loan_no,branch_name,amount)
 Borrower(cust_name,loan_no)
CREATE TABLE Account (
    Acc_no INT PRIMARY KEY,
    branch_name VARCHAR(50),
    balance DECIMAL(10, 2)
);

CREATE TABLE branch (
    branch_name VARCHAR(50) PRIMARY KEY,
    branch_city VARCHAR(50),
    Property DECIMAL(10, 2)
);

CREATE TABLE customer (
    cust_name VARCHAR(50) PRIMARY KEY,
    cust_street VARCHAR(100),
    cust_city VARCHAR(50)
);

CREATE TABLE Depositor (
    cust_name VARCHAR(50),
    Acc_no INT,
    PRIMARY KEY (cust_name, Acc_no),
    FOREIGN KEY (cust_name) REFERENCES customer(cust_name),
    FOREIGN KEY (Acc_no) REFERENCES Account(Acc_no)
);

CREATE TABLE Loan (
    loan_no INT PRIMARY KEY,
    branch_name VARCHAR(50),
    amount DECIMAL(10, 2),
    FOREIGN KEY (branch_name) REFERENCES branch(branch_name)
);

CREATE TABLE Borrower (
    cust_name VARCHAR(50),
    loan_no INT,
    PRIMARY KEY (cust_name, loan_no),
    FOREIGN KEY (cust_name) REFERENCES customer(cust_name),
    FOREIGN KEY (loan_no) REFERENCES Loan(loan_no)
);
-- Insert data into Account table
INSERT INTO Account (Acc_no, branch_name, balance) VALUES (1, 'Branch1', 5000.00);
INSERT INTO Account (Acc_no, branch_name, balance) VALUES (2, 'Branch2', 7000.00);
INSERT INTO Account (Acc_no, branch_name, balance) VALUES (3, 'Branch1', 10000.00);

-- Insert data into branch table
INSERT INTO branch (branch_name, branch_city, Property) VALUES ('Branch1', 'City1', 50000.00);
INSERT INTO branch (branch_name, branch_city, Property) VALUES ('Branch2', 'City2', 70000.00);
INSERT INTO branch (branch_name, branch_city, Property) VALUES ('Branch3', 'City3', 100000.00);

-- Insert data into customer table
INSERT INTO customer (cust_name, cust_street, cust_city) VALUES ('Customer1', 'Street1', 'City1');
INSERT INTO customer (cust_name, cust_street, cust_city) VALUES ('Customer2', 'Street2', 'City2');
INSERT INTO customer (cust_name, cust_street, cust_city) VALUES ('Customer3', 'Street3', 'City3');

-- Insert data into Depositor table
INSERT INTO Depositor (cust_name, Acc_no) VALUES ('Customer1', 1);
INSERT INTO Depositor (cust_name, Acc_no) VALUES ('Customer2', 2);
INSERT INTO Depositor (cust_name, Acc_no) VALUES ('Customer3', 3);

-- Insert data into Loan table
INSERT INTO Loan (loan_no, branch_name, amount) VALUES (1, 'Branch1', 12000.00);
INSERT INTO Loan (loan_no, branch_name, amount) VALUES (2, 'Branch2', 15000.00);
INSERT INTO Loan (loan_no, branch_name, amount) VALUES (3, 'Branch1', 18000.00);

-- Insert data into Borrower table
INSERT INTO Borrower (cust_name, loan_no) VALUES ('Customer1', 1);
INSERT INTO Borrower (cust_name, loan_no) VALUES ('Customer2', 2);
INSERT INTO Borrower (cust_name, loan_no) VALUES ('Customer3', 3);

Q.2. Modify  “assets” attribute of branch table to  “Property”  
	alter table branch rename column assets to property;	
Q.3. Find all loan numbers for loans made at Akurdi Branch with loan amount > 12000
select loan_no from loan where branch_name = 'Branch1' and amount>=12000;
Q.4. Find all customers who have both account and loan at bank.
select cust_name from depositor intersect select cust_name from borrower;
Q.5. Find all customer who have account but no loan at the bank.
select cust_name from depositor minus select cust_name from borrower; 


Q.6. Find the average account balance at each branch
select b.branch_name,avg(a.balance) from branch b inner join account a on a.branch_name = b.branch_name group by b.branch_name;
 Q.7. Find the branches where average account balance > 12000.
select b.branch_name,avg(a.balance) from branch b inner join account a on a.branch_name = b.branch_name group by b.branch_name having avg(a.balance)>7000;
 Q.8. Find number of tuples in customer relation.
	select count(*)  AS num_tuples from customer;
 Q.9. Calculate total loan amount given by bank.
	select sum(amount) from loan;
 Q.10. Delete all loans with loan amount between 1300 and 1500.
delete from loan where amount between 12000 AND 18000;
 Q.11. Create sequence roll_seq and use in student table for roll_no column.
	create sequence roll_seq 
		START WITH 1 
		INCREMENT BY 1 
		MINVALUE 1 
		MAXVALUE 100
		CYCLE;
	CREATE TABLE STUD(ROLL_NO NUMBER,NAME VARCHAR(10));
Problem statements 18
Write Pl/SQL code block for inverting number 1234 to 4321.

DECLARE 
	p_number NUMBER :=1234;
    	p_final NUMBER := 0;
	p_remainder NUMBER;

BEGIN
	WHILE p_number > 0 LOOP
		p_remainder := MOD(p_number,10);
		p_final := p_final * 10 + p_remainder;
		p_number := (p_number-p_remainder)/10;
	END  LOOP;
	DBMS_OUTPUT.PUT_LINE('The inverted number is: ' || p_final);
END;
/



Problem statement 2.
a) Consider following  database schema and solve given queries
 cust_mstr(cust_no,fname,lname)
 add_dets(code_no,add1,add2,state,city,pincode)
 1. Create above Tables with suitable data
 2. Retrieve the address of customer Fname as 'xyz' and Lname as 'pqr'
 3. Create View on add_dets table by selecting any two columns and perform insert 
update delete operations
create table cust_mstr(
 	cust_no number primary key,
        fname varchar(50) not null,
        lname varchar(40) not null
);
create table add_dets(
 	code_no number references cust_mstr(cust_no) on delete cascade,
       add1 varchar(40),
      add2 varchar(50),
       state varchar(40),
      city varchar(40),
       pincode number 
);
	
INSERT INTO cust_mstr (cust_no, fname, lname) VALUES (1, 'John', 'Doe');
-- INSERT INTO cust_mstr (cust_no, fname, lname)
-- VALUES (2, 'Jane', 'Smith');
-- INSERT INTO cust_mstr (cust_no, fname, lname)
-- VALUES (3, 'Alice', 'Johnson');
-- INSERT INTO cust_mstr (cust_no, fname, lname)
-- VALUES (4, 'Bob', 'Williams');
-- INSERT INTO cust_mstr (cust_no, fname, lname)
-- VALUES (5, 'Eve', NULL);
-- INSERT INTO add_dets (code_no, add1, add2, state, city, pincode)
-- VALUES (1, '123 Main St', 'Apt 101', 'California', 'Los Angeles', 90001);
-- INSERT INTO add_dets (code_no, add1, add2, state, city, pincode)
-- VALUES (2, '456 Elm St', '', 'New York', 'New York City', 10001);
-- INSERT INTO add_dets (code_no, add1, add2, state, city, pincode)
-- VALUES (3, '789 Oak St', 'Suite 201', 'Texas', 'Houston', 77002);
-- INSERT INTO add_dets (code_no, add1, add2, state, city, pincode)
-- VALUES (4, '321 Pine St', '', 'California', 'San Francisco', 94102);
-- INSERT INTO add_dets (code_no, add1, add2, state, city, pincode)
-- VALUES (5, '555 Maple Ave', '', 'Florida', 'Miami', 33101);

2. Retrieve the address of customer Fname as 'xyz' and Lname as 'pqr'
select a.add1,a.add2,a.state,a.city,a.pincode from 
add_dets a join cust_mstr c  
on a.code_no = c.cust_no 
where c.fname='Bob' and c.lname= 'Williams';

3. Create View on add_dets table by selecting any two columns and perform insert update delete operations


b) Create following Tables
 emp_mstr(e_mpno,f_name,l_name,m_name,dept,desg,branch_no)
branch_mstr(name,b_no)
 List the employee details along with branch names to which they belong
select e.empno, e.f_name, e.l_name, e.m_name, e.dept, e.desg, e.branch_no, b.name from emp_mstr e join branch_mstr b on e.branch_no = b.b_no;

Problem statement 4.
 a) Create following Tables with suitable data and solve following query
 cust_mstr(custno,fname,lname)
 acc_fd_cust_dets(codeno,acc_fd_no)
 fd_dets(fd_sr_no,amt)

CREATE TABLE cust_mstr (
    custno INT PRIMARY KEY,
    fname VARCHAR(50),
    lname VARCHAR(50)
);

CREATE TABLE acc_fd_cust_dets (
    codeno INT PRIMARY KEY,
    acc_fd_no INT
);

CREATE TABLE fd_dets (
    fd_sr_no INT PRIMARY KEY,
    amt DECIMAL(10, 2)
);
-- Insert data into cust_mstr table
INSERT INTO cust_mstr (custno, fname, lname) VALUES (1, 'John', 'Doe');
INSERT INTO cust_mstr (custno, fname, lname) VALUES (2, 'Jane', 'Smith');

-- Insert data into acc_fd_cust_dets table
INSERT INTO acc_fd_cust_dets (codeno, acc_fd_no) VALUES (101, 1);
INSERT INTO acc_fd_cust_dets (codeno, acc_fd_no) VALUES (102, 2);

-- Insert data into fd_dets table
INSERT INTO fd_dets (fd_sr_no, amt) VALUES (1, 6000.00);
INSERT INTO fd_dets (fd_sr_no, amt) VALUES (2, 4000.00);
 List the customer holding fixed deposit of amount more than 5000 
select c.fname,c.lname from cust_mstr c join acc_fd_cust_dets a on c.custno = a.acc_fd_no join fd_dets f on a.acc_fd_no = f.fd_sr_no where f.amt >5000; 



c) Create following Tables with suitable data and solve following query
 emp_mstr(emp_no,f_name,l_name,m_name,dept)
 cntc_dets(code_no,cntc_type,cntc_data)
CREATE TABLE emp_mstr (
    emp_no INT PRIMARY KEY,
    f_name VARCHAR(50),
    l_name VARCHAR(50),
    m_name VARCHAR(50),
    dept VARCHAR(50)
);

CREATE TABLE cntc_dets (
    code_no INT PRIMARY KEY,
    cntc_type VARCHAR(50),
    cntc_data VARCHAR(50)
);
-- Insert data into emp_mstr table
INSERT INTO emp_mstr (emp_no, f_name, l_name, m_name, dept) VALUES (1, 'John', 'Doe', 'M', 'IT');
INSERT INTO emp_mstr (emp_no, f_name, l_name, m_name, dept) VALUES (2, 'Jane', 'Smith', 'A', 'HR');

-- Insert data into cntc_dets table
INSERT INTO cntc_dets (code_no, cntc_type, cntc_data) VALUES (1, 'Email', 'john.doe@example.com');
INSERT INTO cntc_dets (code_no, cntc_type, cntc_data) VALUES (2, 'Phone', '1234567890');
 -- List the employee details along with contact details using left outer join & right join 
	select e.emp_no, e.f_name, e.l_name, e.m_name, e.dept,c.cntc_type, c.cntc_data from emp_mstr e 
	left outer join cntc_dets c on e.emp_no = c.code_no;
select e.emp_no, e.f_name, e.l_name, e.m_name, e.dept,c.cntc_type, c.cntc_data from emp_mstr e 
	right outer join cntc_dets c on e.emp_no = c.code_no;


Problem statement 15.
 Create Database PCCOE
 Create following Collections
 Teachers(Tname,dno,dname,experience,salary,date_of_joining )
 Students(Sname,roll_no,class)
-- Create Teachers table
CREATE TABLE Teachers (
    Tname VARCHAR2(50),
    dno NUMBER,
    dname VARCHAR2(50),
    experience NUMBER,
    salary NUMBER,
    date_of_joining DATE
);

-- Insert data into Teachers table
INSERT INTO Teachers (Tname, dno, dname, experience, salary, date_of_joining)
VALUES ('John Doe', 1, 'Computer', 5, 15000, TO_DATE('2020-01-01', 'YYYY-MM-DD'));

INSERT INTO Teachers (Tname, dno, dname, experience, salary, date_of_joining)
VALUES ('Jane Smith', 2, 'IT', 8, 18000, TO_DATE('2017-05-15', 'YYYY-MM-DD'));

INSERT INTO Teachers (Tname, dno, dname, experience, salary, date_of_joining)
VALUES ('Alice Johnson', 3, 'E&TC', 3, 12000, TO_DATE('2021-02-20', 'YYYY-MM-DD'));

INSERT INTO Teachers (Tname, dno, dname, experience, salary, date_of_joining)
VALUES ('Praveen Kumar', 2, 'IT', 7, 16000, TO_DATE('2018-09-10', 'YYYY-MM-DD'));


-- Create Students table
CREATE TABLE Students (
    Sname VARCHAR2(50),
    roll_no NUMBER,
    class VARCHAR2(20)
);

-- Insert data into Students table
INSERT INTO Students (Sname, roll_no, class)
VALUES ('Alice', 1, 'A');

INSERT INTO Students (Sname, roll_no, class)
VALUES ('Bob', 2, 'B');

INSERT INTO Students (Sname, roll_no, class)
VALUES ('Charlie', 3, 'C');

INSERT INTO Students (Sname, roll_no, class)
VALUES ('David', 4, 'D');
 Q1. Find the information about all teachers
	select * from teachers ;
Q2. Find the information about all teachers of computer department
	select * from teachers where dname = 'Computer';
 Q3. Find the information about all teachers of computer,IT,ande&TC department
	select * from teachers where dname IN ('Computer','IT','E&TC');
 Q4. Find the information about all teachers of computer,IT,and E&TC department having salary
 greater than or equl to 10000/
	select * from teachers where salary>=10000;
Q5. Find the student information having roll_no = 2 or Sname=xyz.
select * from students where roll_no = 2 or sname = 'Charlie';
 Q6. Update the experience of teacher-praveen to 10years, if the entry is not available in database consider the entry as new entry.
update Teachers set experience=10 where tname='Praveen Kumar';
 Q7. Update the deparment of all the teachers working in IT deprtment to COMP
	update Teachers set dname = 'Computer' where dname = 'IT';
 Q8. Find the teachers name and their experience from teachers collection
      select tname,experience from teachers order by experience;
 Q9. Using Save() method insert one entry in department collection
 Q10. Using Save() method change the dept of teacher praveen to IT
 Q11. Delete all the doccuments from teachers collection having IT dept.
      delete from teachers where dname = 'IT';
 Q12. Display with pretty() method, the first 3 doccuments in teachers collection in ascending order.
16. Consider the relational database
 Supplier(Sid,Sname,address)
 Parts(Pid, Pname, Color)
 Catalog(sid,pid,cost)
CREATE TABLE Supplier (
    Sid INT PRIMARY KEY,
    Sname VARCHAR(50),
    address VARCHAR(100)
);

CREATE TABLE Parts (
    Pid INT PRIMARY KEY,
    Pname VARCHAR(50),
    Color VARCHAR(50)
);

CREATE TABLE Catalog (
    Sid INT,
    Pid INT,
    cost DECIMAL(10, 2),
    PRIMARY KEY (Sid, Pid),
    FOREIGN KEY (Sid) REFERENCES Supplier(Sid),
    FOREIGN KEY (Pid) REFERENCES Parts(Pid)
);
-- Insert data into Supplier table
INSERT INTO Supplier (Sid, Sname, address) VALUES (1, 'Supplier1', 'Address1');
INSERT INTO Supplier (Sid, Sname, address) VALUES (2, 'Supplier2', 'Address2');
INSERT INTO Supplier (Sid, Sname, address) VALUES (3, 'Supplier3', 'Address3');

-- Insert data into Parts table
INSERT INTO Parts (Pid, Pname, Color) VALUES (101, 'Part1', 'Green');
INSERT INTO Parts (Pid, Pname, Color) VALUES (102, 'Part2', 'Red');
INSERT INTO Parts (Pid, Pname, Color) VALUES (103, 'Part3', 'Blue');

-- Insert data into Catalog table
INSERT INTO Catalog (Sid, Pid, cost) VALUES (1, 101, 20.00);
INSERT INTO Catalog (Sid, Pid, cost) VALUES (2, 102, 30.00);
INSERT INTO Catalog (Sid, Pid, cost) VALUES (3, 103, 25.00);


Q. Find name of all parts whose color is green.
	select pname from parts where color='Green';
 Q. Find names of suppliers who supply some red parts.
		select Sname from Supplier where Sid in (select sid from catalog where pid in (select pid from parts where color='Red'));
 Q. Find names of all parts whose cost is more than Rs25.
	select pname from parts where pid in (select pid from Catalog where cost>25);


Consider the relational database
 Student(Rollno,name,address)
 Subject(sub_code,sub_name)
 Marks(Rollno,sub_code, marks)
CREATE TABLE Student (
    Rollno INT PRIMARY KEY,
    name VARCHAR(50),
    address VARCHAR(100)
);


CREATE TABLE Subject (
    sub_code INT PRIMARY KEY,
    sub_name VARCHAR(50)
);

CREATE TABLE Marks (
    Rollno INT,
    sub_code INT,
    marks INT,
    PRIMARY KEY (Rollno, sub_code),
    FOREIGN KEY (Rollno) REFERENCES Student(Rollno),
    FOREIGN KEY (sub_code) REFERENCES Subject(sub_code)
);
-- Insert data into Student table
INSERT INTO Student (Rollno, name, address) VALUES (1, 'Alice', '123 Main St');
INSERT INTO Student (Rollno, name, address) VALUES (2, 'Bob', '456 Elm St');
INSERT INTO Student (Rollno, name, address) VALUES (3, 'Charlie', '789 Oak St');

-- Insert data into Subject table
INSERT INTO Subject (sub_code, sub_name) VALUES (101, 'Math');
INSERT INTO Subject (sub_code, sub_name) VALUES (102, 'DBMS');
INSERT INTO Subject (sub_code, sub_name) VALUES (103, 'Physics');

-- Insert data into Marks table
INSERT INTO Marks (Rollno, sub_code, marks) VALUES (1, 101, 85);
INSERT INTO Marks (Rollno, sub_code, marks) VALUES (1, 102, 75);
INSERT INTO Marks (Rollno, sub_code, marks) VALUES (1, 103, 90);
INSERT INTO Marks (Rollno, sub_code, marks) VALUES (2, 101, 70);
INSERT INTO Marks (Rollno, sub_code, marks) VALUES (2, 102, 65);
INSERT INTO Marks (Rollno, sub_code, marks) VALUES (2, 103, 80);
INSERT INTO Marks (Rollno, sub_code, marks) VALUES (3, 101, 60);
INSERT INTO Marks (Rollno, sub_code, marks) VALUES (3, 102, 55);
INSERT INTO Marks (Rollno, sub_code, marks) VALUES (3, 103, 70);
 Q. Find out average marks of each student along with the name of student.
		select s.name,avg(m.marks) from Student s join marks m on s.Rollno = m.Rollno group by s.name;
 Q. Find how many students have failed in the subject “DBMS”
select COUNT(*) from marks where marks<70 AND sub_code in (SELECT sub_code from Subject where sub_name='DBMS');




Problem statement 6.
 Q 1.Consider table Stud(Roll, Att,Status) 
Write a PL/SQL block for following requirement and handle the exceptions. Roll no. of student will be entered by user. Attendance of roll no. entered by user will be checked in Stud table. If attendance is less than 75% then display the message “Term not granted” and set the  status in stud table as “D”. Otherwise display message “Term granted” and set the status in stud table as “ND”.
create table stud11(
  	 roll number primary key,
   	 attendance number,
    	status varchar(2)
);
insert into stud11(roll,attendance) values (2,45);
insert into stud11(roll,attendance) values (4,45);
insert into stud11(roll,attendance) values (1,75);
insert into stud11(roll,attendance) values (7,85);
DECLARE 
	mroll NUMBER;
	mattendance number;
BEGIN
	mroll := &mroll;
	SELECT attendance into mattendance from stud11 where roll=mroll;
	IF mattendance < 75 THEN
        DBMS_OUTPUT.PUT_LINE('Student is Detained!');
		Update Stud11 set status = 'D' where roll = mroll;
	ELSE 
        DBMS_OUTPUT.PUT_LINE('Student is not Detained');
		Update Stud11 set status ='ND' where roll = mroll;
	END IF;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
    	DBMS_OUTPUT.PUT_LINE('Record not found!');
END;


-- Q 1.Borrower(Roll_no, Name, DateofIssue, NameofBook, Status)
 -- Fine(Roll_no,Date,Amt)
 -- 1.  Accept roll_no& name of book from user.
 -- 2. Check the number of days (from date of issue), if days are between 15 to 30 then fine  amount
 -- will be Rs 5per day.
 -- 3.  If no. of days>30, per day fine will be Rs 50 per day & for days less than 30, Rs. 5 per day.
 -- After submitting the book, status will change from I to R
 -- 4. If condition of fine is true, then details will be stored into fine table.
 -- 5. Also handles the exception by named exception handler or user define exception handler
CREATE OR REPLACE PROCEDURE fine_cal(mroll IN NUMBER, mbook IN VARCHAR) IS
    days NUMBER;
    doi DATE;
    dor DATE := TRUNC(SYSDATE);
    mamt NUMBER;
    less_days EXCEPTION;
BEGIN
    SELECT date_of_issue INTO doi FROM borrower WHERE roll = mroll AND book = mbook;

    days := TRUNC(dor - doi);

    IF days < 15 THEN
        RAISE less_days;
    ELSIF days >= 15 AND days < 30 THEN
        mamt := (days * 5);
    ELSE 
        mamt := ((days - 30) * 15) + (15 * 5);
    END IF;

    UPDATE borrower SET status = 'R' WHERE roll = mroll AND book = mbook;

    INSERT INTO fine (roll, date_of_return, amount) VALUES (mroll, dor, mamt);

    DBMS_OUTPUT.PUT_LINE('Fine calculated and book status updated.');

EXCEPTION 
    WHEN less_days THEN    
        DBMS_OUTPUT.PUT_LINE('Less than 15 days');
    WHEN NO_DATA_FOUND THEN 
        DBMS_OUTPUT.PUT_LINE('Borrower Not found');
END;
/

DECLARE
    mroll NUMBER;
    mbook VARCHAR2(50);
BEGIN
    mroll := &mroll;
    mbook := '&mbook';
    fine_cal(mroll, mbook);
END;
/

SQL> create table fine(roll number,date_of_return date,amount number(10,2)); 

-- select * from branch;
-- -- Insert data into the branch table
-- INSERT INTO branch (branch_name, branch_city, assests)
-- VALUES ('Branch1', 'City1', 100000);
-- INSERT INTO branch (branch_name, branch_city, assests)
-- VALUES ('Branch2', 'City2', 150000);
-- INSERT INTO branch (branch_name, branch_city, assests)
-- VALUES ('Branch3', 'City3', 200000);

-- Insert data into the account table
-- select * from account;
-- INSERT INTO account (acc_no, branch_name, balance)
-- VALUES (1, 'Branch1', 5000.00);
-- INSERT INTO account (acc_no, branch_name,balance) VALUES (2, 'Branch2', 7500.00);
--        INSERT INTO account (acc_no, branch_name,balance) VALUES (3, 'Branch3', 10000.00);

-- -- Insert data into the customer table
-- SELECT * FROM customer;
-- INSERT INTO customer (cust_name, cust_city, cust_street)
-- VALUES ('Customer1', 'City1', 'Street1');
-- INSERT INTO customer (cust_name, cust_city, cust_street)
-- VALUES ('Customer2', 'City2', 'Street2');
-- INSERT INTO customer (cust_name, cust_city, cust_street)
-- VALUES ('Customer3', 'City3', 'Street3');

-- -- Insert data into the depositor table
-- select * from depositor;
-- INSERT INTO depositor (cust_name, acc_no)
-- VALUES ('Customer1', 1);
-- INSERT INTO depositor (cust_name, acc_no)
-- VALUES ('Customer2', 2);
-- INSERT INTO depositor (cust_name, acc_no)
-- VALUES ('Customer3', 3);

-- -- Insert data into the loan table
-- SELECT * FROM loan;
-- INSERT INTO loan (loan_no, branch_name, amount)
-- VALUES (1, 'Branch1', 5000.00);
-- INSERT INTO loan (loan_no, branch_name, amount)
-- VALUES (2, 'Branch2', 7500.00);
-- INSERT INTO loan (loan_no, branch_name, amount)
-- VALUES (3, 'Branch3', 10000.00);

-- Insert data into the borrower table
-- select * from borrower;
-- INSERT INTO borrower (cust_name, loan_no)
-- VALUES ('Customer1', 1);
-- INSERT INTO borrower (cust_name, loan_no)
-- VALUES ('Customer2', 2);
-- INSERT INTO borrower (cust_name, loan_no)
-- VALUES ('Customer3', 3);

 -- 2 Create synonym for customer table as cust.
	-- create synonym cust for customer;

-- 3 Add customer phone number in Customer table.
	-- alter table customer add cust_phone number(10);

-- Q.4 Delete phone number attribute from Customer table.
	-- alter table customer drop column cust_phone;

 -- Q 5.Find the names of all branches in loan relation.
	-- select distinct branch_name from loan;

 -- Q.6. Find all customers who have a loan from bank. Find their names,loan_no and loan amount.
		-- select l.loan_no,l.amount,b.cust_name from loan l
		-- join borrower b on l.loan_no = b.loan_no;
 -- Q.7. List all customers in alphabetical order  who have loan from Akurdi branch.
			-- insert into customer(cust_name,cust_city,cust_street) values ('Branch4','Akurdi','Nigdi');
			-- insert into customer(cust_name,cust_city,cust_street) values ('Branch5','Akurdi','Nigdi');
			-- insert into customer(cust_name,cust_city,cust_street) values ('Branch6','Akurdi','Nigdi');
			-- insert into branch(branch_name,branch_city,assests) values ('Branch6','Akurdi',100000);	
			-- INSERT INTO loan (loan_no, branch_name, amount) VALUES (6, 'Branch4', 5000.00);
			-- select * from loan
		-- insert into borrower(cust_name,loan_no) values('Branch4',6);
		-- select cust_name from borrower where loan_no in (SELECT loan_no from loan where branch_name ='Branch4') order by cust_name;
	-- Q.8. Find all customers who have an account or loan or both at bank.
		-- select cust_name from customer where cust_name in (select cust_name from depositor 
		-- union 
		-- select cust_name from borrower);
		-- select cust_name from depositor 
		-- union 
		-- select cust_name from borrower;
	-- Q.9. Find average account balance at Akurdi branch.
	-- 	select avg(balance) from account where branch_name='Branch1';
		-- -- Q.10. Find no. of depositors at each branch. 
		-- 	select a.branch_name,count(d.acc_no) from account a 
		-- 	join depositor d on a.acc_no = d.acc_no group by a.branch_name;
		-- select * from branch;
			-- select * from loan;


